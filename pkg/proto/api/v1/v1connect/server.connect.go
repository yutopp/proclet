// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/api/v1/server.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/yutopp/proclet/pkg/proto/api/v1"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RunnerServiceName is the fully-qualified name of the RunnerService service.
	RunnerServiceName = "proto.api.v1.RunnerService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RunnerServiceListProcedure is the fully-qualified name of the RunnerService's List RPC.
	RunnerServiceListProcedure = "/proto.api.v1.RunnerService/List"
	// RunnerServiceRunOneshotProcedure is the fully-qualified name of the RunnerService's RunOneshot
	// RPC.
	RunnerServiceRunOneshotProcedure = "/proto.api.v1.RunnerService/RunOneshot"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	runnerServiceServiceDescriptor          = v1.File_proto_api_v1_server_proto.Services().ByName("RunnerService")
	runnerServiceListMethodDescriptor       = runnerServiceServiceDescriptor.Methods().ByName("List")
	runnerServiceRunOneshotMethodDescriptor = runnerServiceServiceDescriptor.Methods().ByName("RunOneshot")
)

// RunnerServiceClient is a client for the proto.api.v1.RunnerService service.
type RunnerServiceClient interface {
	List(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListResponse], error)
	RunOneshot(context.Context, *connect.Request[v1.RunOneshotRequest]) (*connect.ServerStreamForClient[v1.RunOneshotResponse], error)
}

// NewRunnerServiceClient constructs a client for the proto.api.v1.RunnerService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRunnerServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RunnerServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &runnerServiceClient{
		list: connect.NewClient[emptypb.Empty, v1.ListResponse](
			httpClient,
			baseURL+RunnerServiceListProcedure,
			connect.WithSchema(runnerServiceListMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		runOneshot: connect.NewClient[v1.RunOneshotRequest, v1.RunOneshotResponse](
			httpClient,
			baseURL+RunnerServiceRunOneshotProcedure,
			connect.WithSchema(runnerServiceRunOneshotMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// runnerServiceClient implements RunnerServiceClient.
type runnerServiceClient struct {
	list       *connect.Client[emptypb.Empty, v1.ListResponse]
	runOneshot *connect.Client[v1.RunOneshotRequest, v1.RunOneshotResponse]
}

// List calls proto.api.v1.RunnerService.List.
func (c *runnerServiceClient) List(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListResponse], error) {
	return c.list.CallUnary(ctx, req)
}

// RunOneshot calls proto.api.v1.RunnerService.RunOneshot.
func (c *runnerServiceClient) RunOneshot(ctx context.Context, req *connect.Request[v1.RunOneshotRequest]) (*connect.ServerStreamForClient[v1.RunOneshotResponse], error) {
	return c.runOneshot.CallServerStream(ctx, req)
}

// RunnerServiceHandler is an implementation of the proto.api.v1.RunnerService service.
type RunnerServiceHandler interface {
	List(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListResponse], error)
	RunOneshot(context.Context, *connect.Request[v1.RunOneshotRequest], *connect.ServerStream[v1.RunOneshotResponse]) error
}

// NewRunnerServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRunnerServiceHandler(svc RunnerServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	runnerServiceListHandler := connect.NewUnaryHandler(
		RunnerServiceListProcedure,
		svc.List,
		connect.WithSchema(runnerServiceListMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	runnerServiceRunOneshotHandler := connect.NewServerStreamHandler(
		RunnerServiceRunOneshotProcedure,
		svc.RunOneshot,
		connect.WithSchema(runnerServiceRunOneshotMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.api.v1.RunnerService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RunnerServiceListProcedure:
			runnerServiceListHandler.ServeHTTP(w, r)
		case RunnerServiceRunOneshotProcedure:
			runnerServiceRunOneshotHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRunnerServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRunnerServiceHandler struct{}

func (UnimplementedRunnerServiceHandler) List(context.Context, *connect.Request[emptypb.Empty]) (*connect.Response[v1.ListResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.api.v1.RunnerService.List is not implemented"))
}

func (UnimplementedRunnerServiceHandler) RunOneshot(context.Context, *connect.Request[v1.RunOneshotRequest], *connect.ServerStream[v1.RunOneshotResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("proto.api.v1.RunnerService.RunOneshot is not implemented"))
}
