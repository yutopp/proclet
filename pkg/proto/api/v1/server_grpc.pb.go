// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: proto/api/v1/server.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KoyaServiceClient is the client API for KoyaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KoyaServiceClient interface {
	Run(ctx context.Context, opts ...grpc.CallOption) (KoyaService_RunClient, error)
}

type koyaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKoyaServiceClient(cc grpc.ClientConnInterface) KoyaServiceClient {
	return &koyaServiceClient{cc}
}

func (c *koyaServiceClient) Run(ctx context.Context, opts ...grpc.CallOption) (KoyaService_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &KoyaService_ServiceDesc.Streams[0], "/v1.KoyaService/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &koyaServiceRunClient{stream}
	return x, nil
}

type KoyaService_RunClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type koyaServiceRunClient struct {
	grpc.ClientStream
}

func (x *koyaServiceRunClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *koyaServiceRunClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KoyaServiceServer is the server API for KoyaService service.
// All implementations must embed UnimplementedKoyaServiceServer
// for forward compatibility
type KoyaServiceServer interface {
	Run(KoyaService_RunServer) error
	mustEmbedUnimplementedKoyaServiceServer()
}

// UnimplementedKoyaServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKoyaServiceServer struct {
}

func (UnimplementedKoyaServiceServer) Run(KoyaService_RunServer) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedKoyaServiceServer) mustEmbedUnimplementedKoyaServiceServer() {}

// UnsafeKoyaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KoyaServiceServer will
// result in compilation errors.
type UnsafeKoyaServiceServer interface {
	mustEmbedUnimplementedKoyaServiceServer()
}

func RegisterKoyaServiceServer(s grpc.ServiceRegistrar, srv KoyaServiceServer) {
	s.RegisterService(&KoyaService_ServiceDesc, srv)
}

func _KoyaService_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KoyaServiceServer).Run(&koyaServiceRunServer{stream})
}

type KoyaService_RunServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type koyaServiceRunServer struct {
	grpc.ServerStream
}

func (x *koyaServiceRunServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *koyaServiceRunServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KoyaService_ServiceDesc is the grpc.ServiceDesc for KoyaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KoyaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.KoyaService",
	HandlerType: (*KoyaServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _KoyaService_Run_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/api/v1/server.proto",
}
