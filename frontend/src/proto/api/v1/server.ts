// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "proto/api/v1/server.proto" (package "v1", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message v1.RunOneshotRequest
 */
export interface RunOneshotRequest {
    /**
     * @generated from protobuf field: string code = 1;
     */
    code: string;
}
/**
 * @generated from protobuf message v1.RunOneshotResponse
 */
export interface RunOneshotResponse {
    /**
     * @generated from protobuf field: string stdout = 1;
     */
    stdout: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class RunOneshotRequest$Type extends MessageType<RunOneshotRequest> {
    constructor() {
        super("v1.RunOneshotRequest", [
            { no: 1, name: "code", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RunOneshotRequest>): RunOneshotRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.code = "";
        if (value !== undefined)
            reflectionMergePartial<RunOneshotRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RunOneshotRequest): RunOneshotRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string code */ 1:
                    message.code = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RunOneshotRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string code = 1; */
        if (message.code !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.code);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.RunOneshotRequest
 */
export const RunOneshotRequest = new RunOneshotRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RunOneshotResponse$Type extends MessageType<RunOneshotResponse> {
    constructor() {
        super("v1.RunOneshotResponse", [
            { no: 1, name: "stdout", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<RunOneshotResponse>): RunOneshotResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.stdout = "";
        if (value !== undefined)
            reflectionMergePartial<RunOneshotResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RunOneshotResponse): RunOneshotResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string stdout */ 1:
                    message.stdout = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RunOneshotResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string stdout = 1; */
        if (message.stdout !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.stdout);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message v1.RunOneshotResponse
 */
export const RunOneshotResponse = new RunOneshotResponse$Type();
/**
 * @generated ServiceType for protobuf service v1.KoyaService
 */
export const KoyaService = new ServiceType("v1.KoyaService", [
    { name: "RunOneshot", serverStreaming: true, options: {}, I: RunOneshotRequest, O: RunOneshotResponse }
]);
