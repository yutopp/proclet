// @generated by protobuf-ts 2.9.3
// @generated from protobuf file "proto/api/v1/server.proto" (package "v1", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { KoyaService } from "./server";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { RunOneshotResponse } from "./server";
import type { RunOneshotRequest } from "./server";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service v1.KoyaService
 */
export interface IKoyaServiceClient {
    /**
     * @generated from protobuf rpc: RunOneshot(v1.RunOneshotRequest) returns (stream v1.RunOneshotResponse);
     */
    runOneshot(input: RunOneshotRequest, options?: RpcOptions): ServerStreamingCall<RunOneshotRequest, RunOneshotResponse>;
}
/**
 * @generated from protobuf service v1.KoyaService
 */
export class KoyaServiceClient implements IKoyaServiceClient, ServiceInfo {
    typeName = KoyaService.typeName;
    methods = KoyaService.methods;
    options = KoyaService.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: RunOneshot(v1.RunOneshotRequest) returns (stream v1.RunOneshotResponse);
     */
    runOneshot(input: RunOneshotRequest, options?: RpcOptions): ServerStreamingCall<RunOneshotRequest, RunOneshotResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<RunOneshotRequest, RunOneshotResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
