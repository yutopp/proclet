// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file proto/api/v1/server.proto (package proto.api.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message proto.api.v1.ListResponse
 */
export class ListResponse extends Message<ListResponse> {
  /**
   * @generated from field: repeated proto.api.v1.Language languages = 1;
   */
  languages: Language[] = [];

  constructor(data?: PartialMessage<ListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.api.v1.ListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "languages", kind: "message", T: Language, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListResponse {
    return new ListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListResponse {
    return new ListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListResponse | PlainMessage<ListResponse> | undefined, b: ListResponse | PlainMessage<ListResponse> | undefined): boolean {
    return proto3.util.equals(ListResponse, a, b);
  }
}

/**
 * @generated from message proto.api.v1.RunOneshotRequest
 */
export class RunOneshotRequest extends Message<RunOneshotRequest> {
  /**
   * @generated from field: string language_id = 1;
   */
  languageId = "";

  /**
   * @generated from field: string processor_id = 2;
   */
  processorId = "";

  /**
   * @generated from field: string task_id = 3;
   */
  taskId = "";

  /**
   * @generated from field: repeated proto.api.v1.File files = 4;
   */
  files: File[] = [];

  constructor(data?: PartialMessage<RunOneshotRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.api.v1.RunOneshotRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "language_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "processor_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "task_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "files", kind: "message", T: File, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunOneshotRequest {
    return new RunOneshotRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunOneshotRequest {
    return new RunOneshotRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunOneshotRequest {
    return new RunOneshotRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RunOneshotRequest | PlainMessage<RunOneshotRequest> | undefined, b: RunOneshotRequest | PlainMessage<RunOneshotRequest> | undefined): boolean {
    return proto3.util.equals(RunOneshotRequest, a, b);
  }
}

/**
 * @generated from message proto.api.v1.RunOneshotResponse
 */
export class RunOneshotResponse extends Message<RunOneshotResponse> {
  /**
   * @generated from field: string phase = 1;
   */
  phase = "";

  /**
   * @generated from oneof proto.api.v1.RunOneshotResponse.response
   */
  response: {
    /**
     * @generated from field: proto.api.v1.Output output = 2;
     */
    value: Output;
    case: "output";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<RunOneshotResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.api.v1.RunOneshotResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "phase", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "output", kind: "message", T: Output, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunOneshotResponse {
    return new RunOneshotResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunOneshotResponse {
    return new RunOneshotResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunOneshotResponse {
    return new RunOneshotResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RunOneshotResponse | PlainMessage<RunOneshotResponse> | undefined, b: RunOneshotResponse | PlainMessage<RunOneshotResponse> | undefined): boolean {
    return proto3.util.equals(RunOneshotResponse, a, b);
  }
}

/**
 * @generated from message proto.api.v1.File
 */
export class File extends Message<File> {
  /**
   * @generated from field: string path = 1;
   */
  path = "";

  /**
   * @generated from field: bytes content = 2;
   */
  content = new Uint8Array(0);

  constructor(data?: PartialMessage<File>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.api.v1.File";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): File {
    return new File().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): File {
    return new File().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): File {
    return new File().fromJsonString(jsonString, options);
  }

  static equals(a: File | PlainMessage<File> | undefined, b: File | PlainMessage<File> | undefined): boolean {
    return proto3.util.equals(File, a, b);
  }
}

/**
 * @generated from message proto.api.v1.Output
 */
export class Output extends Message<Output> {
  /**
   * 0 = stdout, 1 = stderr
   *
   * @generated from field: int64 kind = 1;
   */
  kind = protoInt64.zero;

  /**
   * utf8
   *
   * @generated from field: bytes buffer = 2;
   */
  buffer = new Uint8Array(0);

  constructor(data?: PartialMessage<Output>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.api.v1.Output";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "buffer", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Output {
    return new Output().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Output {
    return new Output().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Output {
    return new Output().fromJsonString(jsonString, options);
  }

  static equals(a: Output | PlainMessage<Output> | undefined, b: Output | PlainMessage<Output> | undefined): boolean {
    return proto3.util.equals(Output, a, b);
  }
}

/**
 * @generated from message proto.api.v1.Language
 */
export class Language extends Message<Language> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string show_name = 2;
   */
  showName = "";

  /**
   * @generated from field: repeated proto.api.v1.Processor processors = 3;
   */
  processors: Processor[] = [];

  constructor(data?: PartialMessage<Language>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.api.v1.Language";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "show_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "processors", kind: "message", T: Processor, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Language {
    return new Language().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Language {
    return new Language().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Language {
    return new Language().fromJsonString(jsonString, options);
  }

  static equals(a: Language | PlainMessage<Language> | undefined, b: Language | PlainMessage<Language> | undefined): boolean {
    return proto3.util.equals(Language, a, b);
  }
}

/**
 * @generated from message proto.api.v1.Processor
 */
export class Processor extends Message<Processor> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string show_name = 2;
   */
  showName = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: string default_filename = 4;
   */
  defaultFilename = "";

  /**
   * @generated from field: repeated proto.api.v1.Task tasks = 5;
   */
  tasks: Task[] = [];

  constructor(data?: PartialMessage<Processor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.api.v1.Processor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "show_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "default_filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "tasks", kind: "message", T: Task, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Processor {
    return new Processor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Processor {
    return new Processor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Processor {
    return new Processor().fromJsonString(jsonString, options);
  }

  static equals(a: Processor | PlainMessage<Processor> | undefined, b: Processor | PlainMessage<Processor> | undefined): boolean {
    return proto3.util.equals(Processor, a, b);
  }
}

/**
 * @generated from message proto.api.v1.Task
 */
export class Task extends Message<Task> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string show_name = 2;
   */
  showName = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: string kind = 4;
   */
  kind = "";

  /**
   * @generated from field: proto.api.v1.PhasedTask compile = 5;
   */
  compile?: PhasedTask;

  /**
   * @generated from field: proto.api.v1.PhasedTask run = 6;
   */
  run?: PhasedTask;

  constructor(data?: PartialMessage<Task>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.api.v1.Task";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "show_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "compile", kind: "message", T: PhasedTask },
    { no: 6, name: "run", kind: "message", T: PhasedTask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Task {
    return new Task().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Task {
    return new Task().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Task {
    return new Task().fromJsonString(jsonString, options);
  }

  static equals(a: Task | PlainMessage<Task> | undefined, b: Task | PlainMessage<Task> | undefined): boolean {
    return proto3.util.equals(Task, a, b);
  }
}

/**
 * @generated from message proto.api.v1.PhasedTask
 */
export class PhasedTask extends Message<PhasedTask> {
  constructor(data?: PartialMessage<PhasedTask>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "proto.api.v1.PhasedTask";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PhasedTask {
    return new PhasedTask().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PhasedTask {
    return new PhasedTask().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PhasedTask {
    return new PhasedTask().fromJsonString(jsonString, options);
  }

  static equals(a: PhasedTask | PlainMessage<PhasedTask> | undefined, b: PhasedTask | PlainMessage<PhasedTask> | undefined): boolean {
    return proto3.util.equals(PhasedTask, a, b);
  }
}

