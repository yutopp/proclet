// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file proto/api/v1/server.proto (package v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";

/**
 * @generated from message v1.RunOneshotRequest
 */
export class RunOneshotRequest extends Message<RunOneshotRequest> {
  /**
   * @generated from field: string code = 1;
   */
  code = "";

  constructor(data?: PartialMessage<RunOneshotRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.RunOneshotRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunOneshotRequest {
    return new RunOneshotRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunOneshotRequest {
    return new RunOneshotRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunOneshotRequest {
    return new RunOneshotRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RunOneshotRequest | PlainMessage<RunOneshotRequest> | undefined, b: RunOneshotRequest | PlainMessage<RunOneshotRequest> | undefined): boolean {
    return proto3.util.equals(RunOneshotRequest, a, b);
  }
}

/**
 * @generated from message v1.RunOneshotResponse
 */
export class RunOneshotResponse extends Message<RunOneshotResponse> {
  /**
   * @generated from oneof v1.RunOneshotResponse.response
   */
  response: {
    /**
     * @generated from field: v1.Output output = 1;
     */
    value: Output;
    case: "output";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<RunOneshotResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.RunOneshotResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "output", kind: "message", T: Output, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RunOneshotResponse {
    return new RunOneshotResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RunOneshotResponse {
    return new RunOneshotResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RunOneshotResponse {
    return new RunOneshotResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RunOneshotResponse | PlainMessage<RunOneshotResponse> | undefined, b: RunOneshotResponse | PlainMessage<RunOneshotResponse> | undefined): boolean {
    return proto3.util.equals(RunOneshotResponse, a, b);
  }
}

/**
 * @generated from message v1.Output
 */
export class Output extends Message<Output> {
  /**
   * 0 = stdout, 1 = stderr
   *
   * @generated from field: int64 kind = 1;
   */
  kind = protoInt64.zero;

  /**
   * utf8
   *
   * @generated from field: bytes buffer = 2;
   */
  buffer = new Uint8Array(0);

  constructor(data?: PartialMessage<Output>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "v1.Output";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "buffer", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Output {
    return new Output().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Output {
    return new Output().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Output {
    return new Output().fromJsonString(jsonString, options);
  }

  static equals(a: Output | PlainMessage<Output> | undefined, b: Output | PlainMessage<Output> | undefined): boolean {
    return proto3.util.equals(Output, a, b);
  }
}

